var d=Object.defineProperty;var m=(a,e,t)=>e in a?d(a,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[e]=t;var h=(a,e,t)=>(m(a,typeof e!="symbol"?e+"":e,t),t);import{C as c,V as l,p as I,d as u,ap as f,w as r}from"./index.5c4cb14.js";var g=Object.defineProperty,P=Object.getOwnPropertyDescriptor,S=(a,e,t,n)=>{for(var s=n>1?void 0:n?P(e,t):e,i=a.length-1,p;i>=0;i--)(p=a[i])&&(s=(n?p(e,t,s):p(s))||s);return n&&s&&g(e,t,s),s};let o=class extends l{constructor(){super(...arguments);h(this,"paneId")}get pane(){return this.$store.state.panes.panes[this.paneId]}get name(){const e=this.$store.state.panes.panes[this.paneId].name;if(!e)if(!e&&this.$store.state.panes.panes[this.paneId].markets.length){const[,t]=I(this.$store.state.panes.panes[this.paneId].markets[0]);return t+" - "+this.$store.state.panes.panes[this.paneId].type}else return this.paneId;return e}set name(e){this.$store.commit("panes/SET_PANE_NAME",{id:this.paneId,name:e})}async renamePane(){const e=await u.prompt({action:"Rename",input:this.name});e!==null&&e!==this.name&&(this.name=e)}async resetPane(e){await this.close();let t=e?e.data:null;t||(t=JSON.parse(JSON.stringify(f[this.$store.state.panes.panes[this.paneId].type].state))),await this.$store.dispatch("panes/resetPane",{id:this.paneId,data:t})}async getPreset(){let e=await r.getState(this.paneId);return e||(await r.saveState(this.paneId,this.$store.state[this.paneId]),e=await r.getState(this.paneId)),e}};o=S([c({props:{paneId:{required:!0,type:String}}})],o);export{o as P};
